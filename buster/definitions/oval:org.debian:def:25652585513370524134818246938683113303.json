{
	"id": "oval:org.debian:def:25652585513370524134818246938683113303",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2024-27000 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 10",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2024-27000",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-27000"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  serial: mxs-auart: add spinlock around changing cts state  The uart_handle_cts_change() function in serial_core expects the caller to hold uport->lock. For example, I have seen the below kernel splat, when the Bluetooth driver is loaded on an i.MX28 board.      [   85.119255] ------------[ cut here ]------------     [   85.124413] WARNING: CPU: 0 PID: 27 at /drivers/tty/serial/serial_core.c:3453 uart_handle_cts_change+0xb4/0xec     [   85.134694] Modules linked in: hci_uart bluetooth ecdh_generic ecc wlcore_sdio configfs     [   85.143314] CPU: 0 PID: 27 Comm: kworker/u3:0 Not tainted 6.6.3-00021-gd62a2f068f92 #1     [   85.151396] Hardware name: Freescale MXS (Device Tree)     [   85.156679] Workqueue: hci0 hci_power_on [bluetooth]     (...)     [   85.191765]  uart_handle_cts_change from mxs_auart_irq_handle+0x380/0x3f4     [   85.198787]  mxs_auart_irq_handle from __handle_irq_event_percpu+0x88/0x210     (...)",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:28420",
								"comment": "linux DPKG is earlier than 0"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 10 is installed"
			}
		]
	}
}
