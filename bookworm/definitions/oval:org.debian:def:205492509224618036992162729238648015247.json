{
	"id": "oval:org.debian:def:205492509224618036992162729238648015247",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2023-52531 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 12",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2023-52531",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-52531"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  wifi: iwlwifi: mvm: Fix a memory corruption issue  A few lines above, space is kzalloc()'ed for: \tsizeof(struct iwl_nvm_data) + \tsizeof(struct ieee80211_channel) + \tsizeof(struct ieee80211_rate)  'mvm->nvm_data' is a 'struct iwl_nvm_data', so it is fine.  At the end of this structure, there is the 'channels' flex array. Each element is of type 'struct ieee80211_channel'. So only 1 element is allocated in this array.  When doing:   mvm->nvm_data->bands[0].channels = mvm->nvm_data->channels; We point at the first element of the 'channels' flex array. So this is fine.  However, when doing:   mvm->nvm_data->bands[0].bitrates = \t\t\t(void *)((u8 *)mvm->nvm_data->channels + 1); because of the \"(u8 *)\" cast, we add only 1 to the address of the beginning of the flex array.  It is likely that we want point at the 'struct ieee80211_rate' allocated just after.  Remove the spurious casting so that the pointer arithmetic works as expected.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:28369",
								"comment": "linux DPKG is earlier than 6.1.64-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 12 is installed"
			}
		]
	}
}
