{
	"id": "oval:org.debian:def:233783511871543467029797487566589217831",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2024-36881 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 12",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2024-36881",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-36881"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  mm/userfaultfd: reset ptes when close() for wr-protected ones  Userfaultfd unregister includes a step to remove wr-protect bits from all the relevant pgtable entries, but that only covered an explicit UFFDIO_UNREGISTER ioctl, not a close() on the userfaultfd itself.  Cover that too.  This fixes a WARN trace.  The only user visible side effect is the user can observe leftover wr-protect bits even if the user close()ed on an userfaultfd when releasing the last reference of it.  However hopefully that should be harmless, and nothing bad should happen even if so.  This change is now more important after the recent page-table-check patch we merged in mm-unstable (446dd9ad37d0 (\"mm/page_table_check: support userfault wr-protect entries\")), as we'll do sanity check on uffd-wp bits without vma context.  So it's better if we can 100% guarantee no uffd-wp bit leftovers, to make sure each report will be valid.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:30095",
								"comment": "linux DPKG is earlier than 0"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 12 is installed"
			}
		]
	}
}
