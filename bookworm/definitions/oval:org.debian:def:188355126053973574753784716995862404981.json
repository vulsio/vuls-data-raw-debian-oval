{
	"id": "oval:org.debian:def:188355126053973574753784716995862404981",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2022-48950 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 12",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2022-48950",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-48950"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  perf: Fix perf_pending_task() UaF  Per syzbot it is possible for perf_pending_task() to run after the event is free()'d. There are two related but distinct cases:   - the task_work was already queued before destroying the event;  - destroying the event itself queues the task_work.  The first cannot be solved using task_work_cancel() since perf_release() itself might be called from a task_work (____fput), which means the current->task_works list is already empty and task_work_cancel() won't be able to find the perf_pending_task() entry.  The simplest alternative is extending the perf_event lifetime to cover the task_work.  The second is just silly, queueing a task_work while you know the event is going away makes no sense and is easily avoided by re-arranging how the event is marked STATE_DEAD and ensuring it goes through STATE_OFF on the way down.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:25915",
								"comment": "linux DPKG is earlier than 6.1.4-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 12 is installed"
			}
		]
	}
}
