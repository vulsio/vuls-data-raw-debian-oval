{
	"id": "oval:org.debian:def:60207961625084522840762480822399251832",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2024-35986 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 12",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2024-35986",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-35986"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  phy: ti: tusb1210: Resolve charger-det crash if charger psy is unregistered  The power_supply frame-work is not really designed for there to be long living in kernel references to power_supply devices.  Specifically unregistering a power_supply while some other code has a reference to it triggers a WARN in power_supply_unregister():  \tWARN_ON(atomic_dec_return(&psy->use_cnt));  Folllowed by the power_supply still getting removed and the backing data freed anyway, leaving the tusb1210 charger-detect code with a dangling reference, resulting in a crash the next time tusb1210_get_online() is called.  Fix this by only holding the reference in tusb1210_get_online() freeing it at the end of the function. Note this still leaves a theoretical race window, but it avoids the issue when manually rmmod-ing the charger chip driver during development.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:30191",
								"comment": "linux DPKG is earlier than 6.1.90-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 12 is installed"
			}
		]
	}
}
