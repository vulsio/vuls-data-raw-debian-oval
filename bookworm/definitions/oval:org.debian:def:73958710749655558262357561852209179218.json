{
	"id": "oval:org.debian:def:73958710749655558262357561852209179218",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2024-26826 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 12",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2024-26826",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-26826"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  mptcp: fix data re-injection from stale subflow  When the MPTCP PM detects that a subflow is stale, all the packet scheduler must re-inject all the mptcp-level unacked data. To avoid acquiring unneeded locks, it first try to check if any unacked data is present at all in the RTX queue, but such check is currently broken, as it uses TCP-specific helper on an MPTCP socket.  Funnily enough fuzzers and static checkers are happy, as the accessed memory still belongs to the mptcp_sock struct, and even from a functional perspective the recovery completed successfully, as the short-cut test always failed.  A recent unrelated TCP change - commit d5fed5addb2b (\"tcp: reorganize tcp_sock fast path variables\") - exposed the issue, as the tcp field reorganization makes the mptcp code always skip the re-inection.  Fix the issue dropping the bogus call: we are on a slow path, the early optimization proved once again to be evil.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:29211",
								"comment": "linux DPKG is earlier than 6.1.82-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 12 is installed"
			}
		]
	}
}
