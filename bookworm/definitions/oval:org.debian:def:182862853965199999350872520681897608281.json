{
	"id": "oval:org.debian:def:182862853965199999350872520681897608281",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2022-48867 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 12",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2022-48867",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-48867"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  dmaengine: idxd: Prevent use after free on completion memory  On driver unload any pending descriptors are flushed at the time the interrupt is freed: idxd_dmaengine_drv_remove() -> \tdrv_disable_wq() -> \t\tidxd_wq_free_irq() -> \t\t\tidxd_flush_pending_descs().  If there are any descriptors present that need to be flushed this flow triggers a \"not present\" page fault as below:   BUG: unable to handle page fault for address: ff391c97c70c9040  #PF: supervisor read access in kernel mode  #PF: error_code(0x0000) - not-present page  The address that triggers the fault is the address of the descriptor that was freed moments earlier via: drv_disable_wq()->idxd_wq_free_resources()  Fix the use after free by freeing the descriptors after any possible usage. This is done after idxd_wq_reset() to ensure that the memory remains accessible during possible completion writes by the device.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:25838",
								"comment": "linux DPKG is earlier than 6.1.8-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 12 is installed"
			}
		]
	}
}
