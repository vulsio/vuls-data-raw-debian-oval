{
	"id": "oval:org.debian:def:29582097290208185175680649427072954358",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2021-47182 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 12",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2021-47182",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-47182"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  scsi: core: Fix scsi_mode_sense() buffer length handling  Several problems exist with scsi_mode_sense() buffer length handling:   1) The allocation length field of the MODE SENSE(10) command is 16-bits,     occupying bytes 7 and 8 of the CDB. With this command, access to mode     pages larger than 255 bytes is thus possible. However, the CDB     allocation length field is set by assigning len to byte 8 only, thus     truncating buffer length larger than 255.   2) If scsi_mode_sense() is called with len smaller than 8 with     sdev->use_10_for_ms set, or smaller than 4 otherwise, the buffer length     is increased to 8 and 4 respectively, and the buffer is zero filled     with these increased values, thus corrupting the memory following the     buffer.  Fix these 2 problems by using put_unaligned_be16() to set the allocation length field of MODE SENSE(10) CDB and by returning an error when len is too small.  Furthermore, if len is larger than 255B, always try MODE SENSE(10) first, even if the device driver did not set sdev->use_10_for_ms. In case of invalid opcode error for MODE SENSE(10), access to mode pages larger than 255 bytes are not retried using MODE SENSE(6). To avoid buffer length overflows for the MODE_SENSE(10) case, check that len is smaller than 65535 bytes.  While at it, also fix the folowing:   * Use get_unaligned_be16() to retrieve the mode data length and block    descriptor length fields of the mode sense reply header instead of using    an open coded calculation.   * Fix the kdoc dbd argument explanation: the DBD bit stands for Disable    Block Descriptor, which is the opposite of what the dbd argument    description was.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:22503",
								"comment": "linux DPKG is earlier than 5.15.5-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 12 is installed"
			}
		]
	}
}
