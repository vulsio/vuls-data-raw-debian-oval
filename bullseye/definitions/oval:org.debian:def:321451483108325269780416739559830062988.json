{
	"id": "oval:org.debian:def:321451483108325269780416739559830062988",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2021-47516 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 11",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2021-47516",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-47516"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  nfp: Fix memory leak in nfp_cpp_area_cache_add()  In line 800 (#1), nfp_cpp_area_alloc() allocates and initializes a CPP area structure. But in line 807 (#2), when the cache is allocated failed, this CPP area structure is not freed, which will result in memory leak.  We can fix it by freeing the CPP area when the cache is allocated failed (#2).  792 int nfp_cpp_area_cache_add(struct nfp_cpp *cpp, size_t size) 793 { 794 \tstruct nfp_cpp_area_cache *cache; 795 \tstruct nfp_cpp_area *area;  800\tarea = nfp_cpp_area_alloc(cpp, NFP_CPP_ID(7, NFP_CPP_ACTION_RW, 0), 801 \t\t\t\t  0, size); \t// #1: allocates and initializes  802 \tif (!area) 803 \t\treturn -ENOMEM;  805 \tcache = kzalloc(sizeof(*cache), GFP_KERNEL); 806 \tif (!cache) 807 \t\treturn -ENOMEM; // #2: missing free  817\treturn 0; 818 }",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:23666",
								"comment": "linux DPKG is earlier than 5.10.92-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 11 is installed"
			}
		]
	}
}
