{
	"id": "oval:org.debian:def:20884224230841308292909867450822567325",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2023-52492 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 11",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2023-52492",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-52492"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  dmaengine: fix NULL pointer in channel unregistration function  __dma_async_device_channel_register() can fail. In case of failure, chan->local is freed (with free_percpu()), and chan->local is nullified. When dma_async_device_unregister() is called (because of managed API or intentionally by DMA controller driver), channels are unconditionally unregistered, leading to this NULL pointer: [    1.318693] Unable to handle kernel NULL pointer dereference at virtual address 00000000000000d0 [...] [    1.484499] Call trace: [    1.486930]  device_del+0x40/0x394 [    1.490314]  device_unregister+0x20/0x7c [    1.494220]  __dma_async_device_channel_unregister+0x68/0xc0  Look at dma_async_device_register() function error path, channel device unregistration is done only if chan->local is not NULL.  Then add the same condition at the beginning of __dma_async_device_channel_unregister() function, to avoid NULL pointer issue whatever the API used to reach this function.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:28282",
								"comment": "linux DPKG is earlier than 0"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 11 is installed"
			}
		]
	}
}
