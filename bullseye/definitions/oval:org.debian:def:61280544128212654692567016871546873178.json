{
	"id": "oval:org.debian:def:61280544128212654692567016871546873178",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2024-26775 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 11",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2024-26775",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-26775"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  aoe: avoid potential deadlock at set_capacity  Move set_capacity() outside of the section procected by (&d->lock). To avoid possible interrupt unsafe locking scenario:          CPU0                    CPU1         ----                    ---- [1] lock(&bdev->bd_size_lock);                                 local_irq_disable();                             [2] lock(&d->lock);                             [3] lock(&bdev->bd_size_lock);    <Interrupt> [4]  lock(&d->lock);    *** DEADLOCK ***  Where [1](&bdev->bd_size_lock) hold by zram_add()->set_capacity(). [2]lock(&d->lock) hold by aoeblk_gdalloc(). And aoeblk_gdalloc() is trying to acquire [3](&bdev->bd_size_lock) at set_capacity() call. In this situation an attempt to acquire [4]lock(&d->lock) from aoecmd_cfg_rsp() will lead to deadlock.  So the simplest solution is breaking lock dependency [2](&d->lock) -> [3](&bdev->bd_size_lock) by moving set_capacity() outside.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:29782",
								"comment": "linux DPKG is earlier than 0"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 11 is installed"
			}
		]
	}
}
