{
	"id": "oval:org.debian:def:275332704219862004114839362075028378443",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2021-47333 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 11",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2021-47333",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-47333"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  misc: alcor_pci: fix null-ptr-deref when there is no PCI bridge  There is an issue with the ASPM(optional) capability checking function. A device might be attached to root complex directly, in this case, bus->self(bridge) will be NULL, thus priv->parent_pdev is NULL. Since alcor_pci_init_check_aspm(priv->parent_pdev) checks the PCI link's ASPM capability and populate parent_cap_off, which will be used later by alcor_pci_aspm_ctrl() to dynamically turn on/off device, what we can do here is to avoid checking the capability if we are on the root complex. This will make pdev_cap_off 0 and alcor_pci_aspm_ctrl() will simply return when bring called, effectively disable ASPM for the device.  [    1.246492] BUG: kernel NULL pointer dereference, address: 00000000000000c0 [    1.248731] RIP: 0010:pci_read_config_byte+0x5/0x40 [    1.253998] Call Trace: [    1.254131]  ? alcor_pci_find_cap_offset.isra.0+0x3a/0x100 [alcor_pci] [    1.254476]  alcor_pci_probe+0x169/0x2d5 [alcor_pci]",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:23614",
								"comment": "linux DPKG is earlier than 5.10.70-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 11 is installed"
			}
		]
	}
}
