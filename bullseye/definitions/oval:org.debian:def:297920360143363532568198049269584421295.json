{
	"id": "oval:org.debian:def:297920360143363532568198049269584421295",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2022-48760 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 11",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2022-48760",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2022-48760"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  USB: core: Fix hang in usb_kill_urb by adding memory barriers  The syzbot fuzzer has identified a bug in which processes hang waiting for usb_kill_urb() to return.  It turns out the issue is not unlinking the URB; that works just fine.  Rather, the problem arises when the wakeup notification that the URB has completed is not received.  The reason is memory-access ordering on SMP systems.  In outline form, usb_kill_urb() and __usb_hcd_giveback_urb() operating concurrently on different CPUs perform the following actions:  CPU 0\t\t\t\t\tCPU 1 ----------------------------\t\t--------------------------------- usb_kill_urb():\t\t\t\t__usb_hcd_giveback_urb():   ...\t\t\t\t\t  ...   atomic_inc(&urb->reject);\t\t  atomic_dec(&urb->use_count);   ...\t\t\t\t\t  ...   wait_event(usb_kill_urb_queue, \tatomic_read(&urb->use_count) == 0); \t\t\t\t\t  if (atomic_read(&urb->reject)) \t\t\t\t\t\twake_up(&usb_kill_urb_queue);  Confining your attention to urb->reject and urb->use_count, you can see that the overall pattern of accesses on CPU 0 is:  \twrite urb->reject, then read urb->use_count;  whereas the overall pattern of accesses on CPU 1 is:  \twrite urb->use_count, then read urb->reject.  This pattern is referred to in memory-model circles as SB (for \"Store Buffering\"), and it is well known that without suitable enforcement of the desired order of accesses -- in the form of memory barriers -- it is entirely possible for one or both CPUs to execute their reads ahead of their writes.  The end result will be that sometimes CPU 0 sees the old un-decremented value of urb->use_count while CPU 1 sees the old un-incremented value of urb->reject.  Consequently CPU 0 ends up on the wait queue and never gets woken up, leading to the observed hang in usb_kill_urb().  The same pattern of accesses occurs in usb_poison_urb() and the failure pathway of usb_hcd_submit_urb().  The problem is fixed by adding suitable memory barriers.  To provide proper memory-access ordering in the SB pattern, a full barrier is required on both CPUs.  The atomic_inc() and atomic_dec() accesses themselves don't provide any memory ordering, but since they are present, we can use the optimized smp_mb__after_atomic() memory barrier in the various routines to obtain the desired effect.  This patch adds the necessary memory barriers.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:26626",
								"comment": "linux DPKG is earlier than 5.10.103-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 11 is installed"
			}
		]
	}
}
