{
	"id": "oval:org.debian:def:173945634073483924229731081460085353504",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2023-52854 linux",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 11",
			"product": "linux"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2023-52854",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2023-52854"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  padata: Fix refcnt handling in padata_free_shell()  In a high-load arm64 environment, the pcrypt_aead01 test in LTP can lead to system UAF (Use-After-Free) issues. Due to the lengthy analysis of the pcrypt_aead01 function call, I'll describe the problem scenario using a simplified model:  Suppose there's a user of padata named `user_function` that adheres to the padata requirement of calling `padata_free_shell` after `serial()` has been invoked, as demonstrated in the following code:  ```c struct request {     struct padata_priv padata;     struct completion *done; };  void parallel(struct padata_priv *padata) {     do_something(); }  void serial(struct padata_priv *padata) {     struct request *request = container_of(padata,     \t\t\t\tstruct request, \t\t\t\tpadata);     complete(request->done); }  void user_function() {     DECLARE_COMPLETION(done)     padata->parallel = parallel;     padata->serial = serial;     padata_do_parallel();     wait_for_completion(&done);     padata_free_shell(); } ```  In the corresponding padata.c file, there's the following code:  ```c static void padata_serial_worker(struct work_struct *serial_work) {     ...     cnt = 0;      while (!list_empty(&local_list)) {         ...         padata->serial(padata);         cnt++;     }      local_bh_enable();      if (refcount_sub_and_test(cnt, &pd->refcnt))         padata_free_pd(pd); } ```  Because of the high system load and the accumulation of unexecuted softirq at this moment, `local_bh_enable()` in padata takes longer to execute than usual. Subsequently, when accessing `pd->refcnt`, `pd` has already been released by `padata_free_shell()`, resulting in a UAF issue with `pd->refcnt`.  The fix is straightforward: add `refcount_dec_and_test` before calling `padata_free_pd` in `padata_free_shell`.",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:29092",
								"comment": "linux DPKG is earlier than 5.10.205-1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 11 is installed"
			}
		]
	}
}
