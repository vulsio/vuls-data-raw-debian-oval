{
	"id": "oval:org.debian:def:152762871208041808212337211730395716982",
	"class": "vulnerability",
	"metadata": {
		"title": "CVE-2024-41006 linux-6.1",
		"affected": {
			"family": "unix",
			"platform": "Debian GNU/Linux 11",
			"product": "linux-6.1"
		},
		"reference": [
			{
				"source": "CVE",
				"ref_id": "CVE-2024-41006",
				"ref_url": "https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-41006"
			}
		],
		"description": "In the Linux kernel, the following vulnerability has been resolved:  netrom: Fix a memory leak in nr_heartbeat_expiry()  syzbot reported a memory leak in nr_create() [0].  Commit 409db27e3a2e (\"netrom: Fix use-after-free of a listening socket.\") added sock_hold() to the nr_heartbeat_expiry() function, where a) a socket has a SOCK_DESTROY flag or b) a listening socket has a SOCK_DEAD flag.  But in the case \"a,\" when the SOCK_DESTROY flag is set, the file descriptor has already been closed and the nr_release() function has been called. So it makes no sense to hold the reference count because no one will call another nr_destroy_socket() and put it as in the case \"b.\"  nr_connect   nr_establish_data_link     nr_start_heartbeat  nr_release   switch (nr->state)   case NR_STATE_3     nr->state = NR_STATE_2     sock_set_flag(sk, SOCK_DESTROY);                          nr_rx_frame                           nr_process_rx_frame                             switch (nr->state)                             case NR_STATE_2                               nr_state2_machine()                                 nr_disconnect()                                   nr_sk(sk)->state = NR_STATE_0                                   sock_set_flag(sk, SOCK_DEAD)                          nr_heartbeat_expiry                           switch (nr->state)                           case NR_STATE_0                             if (sock_flag(sk, SOCK_DESTROY) ||                                (sk->sk_state == TCP_LISTEN                                  && sock_flag(sk, SOCK_DEAD)))                                sock_hold()  // ( !!! )                                nr_destroy_socket()  To fix the memory leak, let's call sock_hold() only for a listening socket.  Found by InfoTeCS on behalf of Linux Verification Center (linuxtesting.org) with Syzkaller.  [0]: https://syzkaller.appspot.com/bug?extid=d327a1f3b12e1e206c16",
		"debian": {}
	},
	"criteria": {
		"operator": "AND",
		"criterias": [
			{
				"operator": "OR",
				"criterias": [
					{
						"operator": "AND",
						"criterions": [
							{
								"test_ref": "oval:org.debian.oval:tst:2",
								"comment": "all architecture"
							},
							{
								"test_ref": "oval:org.debian.oval:tst:31183",
								"comment": "linux-6.1 DPKG is earlier than 6.1.119-1~deb11u1"
							}
						]
					}
				]
			}
		],
		"criterions": [
			{
				"test_ref": "oval:org.debian.oval:tst:1",
				"comment": "Debian 11 is installed"
			}
		]
	}
}
